DESIGN DB MODEL FOR GUVI ZEN CLASS

CREATE TABLE STUDENTS
(
id INTEGER AUTO_INCREMENT PRIMARY KEY,
user_name VARCHAR(30),
mail_address VARCHAR(30),
course INTEGER
);


INSERT INTO
STUDENTS(user_name,mail_address,course)
VALUES('maharaja','maharaja@gmail.com',1),
('codd','codd@gmail.com',2),
('chidambaram','chidambaram@gmail.com',3),
('Seergaali','seergaali@gmail.com',4);

— to delete table data

DELETE FROM STUDENTS WHERE id = 3;(<= For Example) 
select * from STUDENTS;

- to refer Foreign Key 

alter table STUDENTS

add foreign key (course) references course_data (course_id);

— create table codekata

create table codekata(

code_id integer auto_increment primary key,

user_id integer,

number_of_problem integer,

problem_Status VARCHAR(255),

FOREIGN KEY (user_id) REFERENCES STUDENTS(id)

);

delete from codekata where code_id in(6,7,8,9,10);

select * from codekata;

drop table codekata;

INSERT INTO codeketa( user_id,number_of_problem,problem_status) VALUES

(6,20,'pending'),

( 6,20,'finished'),

(7,40,'finished'),

(7,40,'finished'),

(8,50,'finished');

select * from codekata;

delete from codeketa where code_id in(2,3,4,5);

delete from STUDENTS where id in(1,2,3,4,5);

DELETE FROM codeketa;

— Primary keys must contain UNIQUE values, and cannot contain NULL values.

— The table with the foreign key is called the child table, and

— the table with the primary key is called the referenced or parent table.

For company_drives

CREATE TABLE company_drives (

drive_id INTEGER AUTO_INCREMENT PRIMARY KEY,

user_id INTEGER,

drive_date DATE,

company VARCHAR(100),

FOREIGN KEY (user_id) REFERENCES STUDENTS(id)

);

INSERT INTO company_drives(user_id, drive_date, company) VALUES

(6,makedate(2024, 3), 'MicroSoft'),

(6,makedate(2024, 5), 'Amazon'),

(7,makedate(2024, 3), 'NETFLIX'),

(7,makedate(2023, 12), 'GOOGLE'),

(8,makedate(2023,5), 'TCS');

select * from company_drives;

delete from company_drives where user_id in(1,2,3,4,5);

- - For batch_data

CREATE TABLE batch_data(

batch_id int auto_increment primary key,

batch_name varchar(100)

insert into batch_data(batch_name)values

('full stack-2024'),

('full stack-2024'),

('html-2024'),

('css-2024'),

('mongodb-2024');

select * from batch_data;

alter table batch_data

add foreign key (batch_id)references STUDENTS(course);

— inner join table-common value

SELECT STUDENTS.course,batch_data.batch_id

FROM STUDENTS

INNER JOIN batch_data on STUDENTS.course = batch_data.batch_id;

— mentor

CREATE TABLE mentors (

mentorid INTEGER AUTO_INCREMENT PRIMARY KEY,

mentorname VARCHAR(100),

mentoremail VARCHAR(100)

);

INSERT INTO mentors(mentorname, mentoremail) VALUES

('sangeetha', 'sansangeetha@gmail.com'),

('Vijay' , 'vijay@gmail.com'),

('Ajith','Ajith@gmail.com'),

('prabhu' ,'prabhu@gmail.com');
INSERT INTO mentors(mentorname, mentoremail) VALUES

('vanga','vanga@gmail.com');

select * from mentors;


);

— create table topics

CREATE TABLE topics (

topicid INTEGER AUTO_INCREMENT PRIMARY KEY,

topic VARCHAR(200),

topic_date DATE,

mentor_id integer,

FOREIGN KEY (mentor_id) REFERENCES mentors(mentorid)

);

INSERT INTO topics(topic, topic_date, mentor_id) VALUES

('HTML — Basics', '2023/04/01', 1),

('NodeJS — Basics', '2023/06/03', 2),

('JavaScript — Basics', '2023/07/05', 3),

('React — Basics', '2023/08/06', 4),

('mysql -Basic','2023/09/5',5);

select * from topics;

— tasks:

CREATE TABLE tasks (

taskid INTEGER AUTO_INCREMENT PRIMARY KEY,

topic_id integer,

task VARCHAR(1000),

batch_id INTEGER,

FOREIGN KEY (topic_id) REFERENCES topics(topicid)

);

INSERT INTO tasks(topic_id, task, batch_id)VALUES

(1, 'HTML Task', 1),

(2, 'Javascript Task', 2),

(3, 'React Task',3),

(4, 'NodeJs Task',4),

(5, 'Mysql task',5);

select * from tasks;

— attendance table

CREATE TABLE attendance (

attendanceid INTEGER AUTO_INCREMENT PRIMARY KEY,

user_id integer,

topicsid INTEGER,

attended BOOLEAN,

FOREIGN KEY ( user_id) REFERENCES STUDENTS( id),

FOREIGN KEY (topicsid) REFERENCES topics(topicid)

);


INSERT INTO attendance( user_id, topicsid, attended) VALUES

(6, 1, true),


(7, 1, false),

(6, 4, true),
(8, 4, true),

(5, 4, true);

select * from attendance;